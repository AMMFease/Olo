#!/usr/bin/python3
# encoding: utf-8

thisVersion = "v003"


#######################################################################################
## This file contains test suites, tests and associated utilties for the Olo Challenge.
##
## Please read the README.md and TestPlan.txt documents for requirements, test plan and
## notes for current restrictions and future enhancements.
##
## v001 - Initial version with starter utilities and first test use case (get posts).
## v002 - Added code for remaining test use cases (positive tests only).
## v003 - Added TBDs for logging, performance suite, etc.
#######################################################################################


#######################################################################################
## Imports
#######################################################################################
import requests
import logging


#######################################################################################
## Global variables
#######################################################################################
BaseUrl = "https://jsonplaceholder.typicode.com/"  # URL for JSONPlaceholder.

## TBD for stress and multiple test execution, set RunSetup to false on first test 
## invocation so that the system will build up data as the test progresses, rather 
## than cleaning up after each test case.  Last test case in the test suite should
## set RunTeardown to True so SUT gets cleaned up at the end of the test suite.
RunSetup = True     # Should the test case/suite run setup?
RunTeardown = True  # Should the test case/suite run teardown?

class APICall:      # Types of API calls exercised by this test suite.
    GET = 1
    POST = 2
    PUT = 3
    DELETE = 4


#######################################################################################
## Utilities
#######################################################################################

## Set up the SUT.
def setup():
    print("\nInitializing system...")
    ### TBD set up system with initial test data.
    
## Clean up the SUT.
def teardown():
    print("\nCleaning up system...")
    ### TBD delete all test data on the SUT.
    
##### TBD #####
## Logging utility - log messages in the format "<timestamp> - <method name>: message"
## so we don't have to print so much to the console.  
## def log(msg):
    
## Make the API call and print the results.    
def callAPI(callType, callParams, data = {}):   
    response = None
    url = "%s%s" % (BaseUrl, callParams) 
    
    if (callType == APICall.GET):
        print("\nAttempting GET call '%s'" % url)
        response = requests.get(url)   
    elif (callType == APICall.POST):
        print("\nAttempting POST call '%s'" % url)
        response = requests.post(url, data)   
    elif (callType == APICall.PUT):
        print("\nAttempting PUT call '%s'" % url)
        response = requests.put(url, data)   
    elif (callType == APICall.DELETE):
        print("\nAttempting DELETE call '%s'" % url)
        response = requests.delete(url)   
    else:
        print("Illegal value")
        
    if response is not None:
        # Print the results.
        # Success API return calls are 200 (OK) and 201 (Created).   
        print("Return code = %d" % response.status_code)     # Print http response code.
        if (response.status_code != 500):  # No response text for server error 500
            print("Returned JSON response:\n%s" % response.text) # Print formatted JSON response. 
    
        # Return test results - success or failure.
        if ((response.status_code == 200) or (response.status_code == 201)):
            return True
        else:
            return False
    else:
        return False


#######################################################################################
## Tests
#######################################################################################
## Test "GET posts".
def testGet():
    setup()
    success = callAPI(APICall.GET, "posts")
    if (success):
        print("\n*** Test testGet() completed successfully. ***")
    else:
        print("\n*** Test testGet() failed. ***")
    teardown()

## Test "POST posts".
def testPost():
    setup()
    success = callAPI(APICall.POST, "posts")
    if (success):
        print("\n*** Test testPost() completed successfully. ***")
    else:
        print("\n*** Test testPost() failed. ***")
    teardown()
    
## Test "PUT post with an id".
def testPutById(id):
    setup()
    idString = "posts/%d" % id
    data = {
        "userId": 104,
        "title": "Generated by AFease",
        "body": "Here is some text"
    } 
    success = callAPI(APICall.PUT, idString, data)
    if (success):
        print("\n*** Test testPutById() completed successfully. ***")
    elif ((not success) and (id == 7000)):
        print("\n*** Negative test testPutById() completed sucessfully. ***")
    else:
        print("\n*** Test testPutById() failed. ***")
    teardown()

## Test "DELETE post with an id".
def testDeleteById(id):
    setup()
    idString = "posts/%d" % id
    success = callAPI(APICall.DELETE, idString)
    if (success):
        print("\n*** Test testDeleteById() completed successfully. ***")
    elif ((not success) and (id == 7000)):
        print("\n*** Negative test testDeleteById() completed sucessfully. ***")
    else:
        print("\n*** Test testDeleteById() failed. ***")
    teardown()

## Test "POST post with an id".
def testPostById(id):
    setup()
    idString = "posts/%d/comments" % id
    data = {
        "postId": 1,
        "id": 1,
        "name": "Comment by AFease",
        "email": "Andrea.Fease@gmail.com",
        "body": "Here is my comment"
    }
    success = callAPI(APICall.POST, idString, data)
    if (success):
        print("\n*** Test testPostById() completed successfully. ***")
    elif ((not success) and (id == 7000)):
        print("\n*** Negative test testPostById() completed sucessfully. ***")
    else:
        print("\n*** Test testPostById() failed. ***")
    teardown()

## Test "GET post with an id".
def testGetById(id):
    setup()
    idString = "comments?postId=%d" % id
    success = callAPI(APICall.GET, idString)
    if (success):
        print("\n*** Test testGetById() completed successfully. ***")
    elif ((not success) and (id == 7000)):
        print("\n*** Negative test testGetById() completed sucessfully. ***")
    else:
        print("\n*** Test testGetById() failed. ***")
    teardown()


#######################################################################################
## Test Suites
#######################################################################################
## Positive test suite.
def doPositiveTests():
    print("\nSet id to 1 and run positive tests ...")
    id = 1
    testGet()
    testPost()
    testPutById(id)
    testDeleteById(id)
    testPostById(id)
    testGetById(id)

## Negative test suite.
def doNegativeTests():
    # A hack as id in this case is <=100.  Generally this should be set to the maximum
    # id + a random value to ensure the id does not exist.
    print("Set id to 7000 and run negative tests ...")
    id = 7000
    testPutById(id)
    testDeleteById(id)
    testPostById(id)
    testGetById(id)

## Stress test suite.
##### TBD #####
## Create multiple threads, each performing a single operation, and run threads 
## randomly for a specific amount of time, in parallel.
## def doStressTest():


#######################################################################################
## Main
#######################################################################################
print("\nBegin tests ....")
doPositiveTests()
doNegativeTests()
#doStressTest()
print("\nTest execution complete.")

